name: Generate Release

on:
  workflow_run:
    workflows:
      - 'Update Version'
    types:
      - 'completed'

defaults:
  run:
    shell:  |
            pwsh -noninteractive -command "try {{ $ErrorActionPreference='Stop'; . '{0}' }} catch {{ Write-Error ""FAILED: $_""; throw; }} if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) {{ exit $LASTEXITCODE }}"
            
jobs:
  build-release: # Only run on successful version update action
    runs-on:  windows-latest
    if:       ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      DOTNET_NOLOGO:                true
      DOTNET_CLI_TELEMETRY_OPTOUT:  true

    steps:
      - uses: actions/checkout@v4
        with:
          ref:          '${{ github.ref }}'

      - uses: actions/setup-dotnet@main
        with:
          dotnet-version:   6.0.x

      - name:   Build
        run:    dotnet build -c Release
        
      - name:   Authenticate with Github NuGet Package Registry
        run:    dotnet nuget add source --username radj307 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/radj307/index.json"
        
      - name:   Pack NuGet Package
        run:    dotnet pack ./radj307.IconExtractor/radj307.IconExtractor.csproj --noLogo -c Release -o ./publish --include-symbols
        
      - name:   Upload NuGet Package
        run:    >
                foreach ($pkg in $(Get-ChildItem -Filter *.nupkg)) { 
                  dotnet nuget push $pkg.Name -k ${{ github.token }} -s https://nuget.pkg.github.com/radj307/index.json --skip-duplicate ;
                  dotnet nuget push $pkg.Name -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
                }

      - name:   Upload Artifact
        uses:   actions/upload-artifact@v3
        with:
          name: sdk
          path: './publish/*'
          if-no-files-found: error

  # Create the release using the uploaded artifact on github:
  create-release:
    needs:    build-release
    runs-on:  ubuntu-latest

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          path:  ${{github.workspace}}

      - run:  ls -lAghR

      - name: Get Latest Tag
        id:   get-tag
        uses: actions/get-latest-tag@v1.3.0

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: '${{ steps.get-tag.outputs.tag }}'
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
                 publish/radj307.IconExtractor.0.0.0.nupkg
                 publish/radj307.IconExtractor.0.0.0.snupkg
                        
